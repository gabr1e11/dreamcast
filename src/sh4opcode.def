/* Definition of all opcodes for the SH4 processor. The
   format is as follows:

   { <opcode1>, <mnemonic1> },
   { <opcode2>, <mnemonic2> },
	...
   { "<opcodeN>", "<mnemonicN>" }

  where:
	<opcode> is the binary generic representation of the opcode. In this representation any
             combination of '1', '0' and any letter is allowed, with a maximum of 3 different
             letter symbols. Each letter is considered an opcode parameter and the number of
			 letters of the same symbol is used to determine its size in bits. For example:

                   0101mmnn0000dddd

			 Indicates 3 parameters: m, n and d, with respectively 2, 2 and 4 bits

	<mnemonic> is a string representing the mnemonic associated to the opcode. For this
               representation the special pair %<letter> is allowed to indicate where the
               parameter defined in <opcode> fits in the disassembled mnemonic. For example,
               taking into account the opcode defined in the previous example:

                   ldc @(%d,R%m),R%n

  This file is intended to be included inside a struct array definition like:

    struct {
        char opcode[17];
        char mnemonic[32];
	} opcodeDefs[] = {
        #include "sh4opcode.def"
    }
*/
{ "0000000000000000", "EXCEPTION" },         /* Use as default for non-defined entries */
{ "1110nnnniiiiiiii", "mov #%i,R%n" },
{ "1001nnnndddddddd", "mov.w @(%d,PC),R%n" },
{ "1101nnnndddddddd", "mov.l @(%d,PC),R%n" },
{ "0110nnnnmmmm0011", "mov R%m,R%n" },
{ "0010nnnnmmmm0000", "mov.b R%m,@R%n" },
{ "0010nnnnmmmm0001", "mov.w R%m,@R%n" },
{ "0010nnnnmmmm0010", "mov.l R%m,@R%n" },
{ "0110nnnnmmmm0000", "mov.b @R%m,R%n" },
{ "0110nnnnmmmm0001", "mov.w @R%m,R%n" },
{ "0110nnnnmmmm0010", "mov.l @R%m,R%n" },
{ "0010nnnnmmmm0100", "mov.b R%m,@-R%n" },
{ "0010nnnnmmmm0101", "mov.w R%m,@-R%n" },
{ "0010nnnnmmmm0110", "mov.l R%m,@-R%n" },
{ "0110nnnnmmmm0100", "mov.b @R%m+,R%n" },
{ "0110nnnnmmmm0101", "mov.w @R%m+,R%n" },
{ "0110nnnnmmmm0110", "mov.l @R%m+,R%n" },
{ "10000000nnnndddd", "mov.b R0,@(%d,R%n)" },
{ "10000001nnnndddd", "mov.w R0,@(%d,R%n)" },
{ "0001nnnnmmmmdddd", "mov.l R%m,@(%d,R%n)" },
{ "10000100mmmmdddd", "mov.b @(%d,R%m),R0" },
{ "10000101mmmmdddd", "mov.w @(%d,R%m),R0" },
{ "0101nnnnmmmmdddd", "mov.l @(%d,R%m),R%n" },
{ "0000nnnnmmmm0100", "mov.b R%m,@(R0,R%n)" },
{ "0000nnnnmmmm0101", "mov.w R%m,@(R0,R%n)" },
{ "0000nnnnmmmm0110", "mov.l R%m,@(R0,R%n)" },
{ "0000nnnnmmmm1100", "mov.b @(R0,R%m),R%n" },
{ "0000nnnnmmmm1101", "mov.w @(R0,R%m),R%n" },
{ "0000nnnnmmmm1110", "mov.l @(R0,R%m),R%n" },
{ "11000000dddddddd", "mov.b R0,@(%d,GBR)" },
{ "11000001dddddddd", "mov.w R0,@(%d,GBR)" },
{ "11000010dddddddd", "mov.l R0,@(%d,GBR)" },
{ "11000100dddddddd", "mov.b @(%d,GBR),R0" },
{ "11000101dddddddd", "mov.w @(%d,GBR),R0" },
{ "11000110dddddddd", "mov.l @(%d,GBR),R0" },
{ "11000111dddddddd", "mova @(%d,PC),R0" },
{ "0000nnnn00101001", "movt R%n" },
{ "0110nnnnmmmm1000", "swap.b R%m,R%n" },
{ "0110nnnnmmmm1001", "swap.w R%m,R%n" },
{ "0010nnnnmmmm1101", "xtrct R%m,R%n" },
{ "0011nnnnmmmm1100", "add R%m,R%n" },
{ "0111nnnniiiiiiii", "add #%i,R%n" },
{ "0011nnnnmmmm1110", "addc R%m,R%n" },
{ "0011nnnnmmmm1111", "addv R%m,R%n" },
{ "10001000iiiiiiii", "cmp/eq #%i,R0" },
{ "0011nnnnmmmm0000", "cmp/eq R%m,R%n" },
{ "0011nnnnmmmm0010", "cmp/hs R%m,R%n" },
{ "0011nnnnmmmm0011", "cmp/ge R%m,R%n" },
{ "0011nnnnmmmm0110", "cmp/hi R%m,R%n" },
{ "0011nnnnmmmm0111", "cmp/gt R%m,R%n" },
{ "0100nnnn00010001", "cmp/pz R%n" },
{ "0100nnnn00010101", "cmp/pl R%n" },
{ "0010nnnnmmmm1100", "cmp/str R%m,R%n" },
{ "0011nnnnmmmm0100", "div1 R%m,R%n" },
{ "0010nnnnmmmm0111", "div0s R%m,R%n" },
{ "0000000000011001", "div0u" },
{ "0011nnnnmmmm1101", "dmuls.l R%m,R%n" },
{ "0011nnnnmmmm0101", "dmulu.l R%m,R%n" },
{ "0100nnnn00010000", "dt R%n" },
{ "0110nnnnmmmm1110", "exts.b R%m,R%n" },
{ "0110nnnnmmmm1111", "exts.w R%m,R%n" },
{ "0110nnnnmmmm1100", "extu.b R%m,R%n" },
{ "0110nnnnmmmm1101", "extu.w R%m,R%n" },
{ "0000nnnnmmmm1111", "mac.l @R%m+,@R%n+" },
{ "0100nnnnmmmm1111", "mac.w @R%m+,@R%n+" },
{ "0000nnnnmmmm0111", "mul.l R%m,R%n" },
{ "0010nnnnmmmm1111", "muls.w R%m,R%n" },
{ "0010nnnnmmmm1110", "mulu.w R%m,R%n" },
{ "0110nnnnmmmm1011", "neg R%m,R%n" },
{ "0110nnnnmmmm1010", "negc R%m,R%n" },
{ "0011nnnnmmmm1000", "sub R%m,R%n" },
{ "0011nnnnmmmm1010", "subc R%m,R%n" },
{ "0011nnnnmmmm1011", "subv R%m,R%n" },
{ "0010nnnnmmmm1001", "and R%m,R%n" },
{ "11001001iiiiiiii", "and #%i,R0" },
{ "11001101iiiiiiii", "and.b #%i,@(R0,GBR)" },
{ "0110nnnnmmmm0111", "not R%m,R%n" },
{ "0010nnnnmmmm1011", "or R%m,R%n" },
{ "11001011iiiiiiii", "or #%i,R0" },
{ "11001111iiiiiiii", "or.b #%i,@(R0,GBR)" },
{ "0100nnnn00011011", "tas.b @R%n" },
{ "0010nnnnmmmm1000", "tst R%m,R%n" },
{ "11001000iiiiiiii", "tst #%i,R0" },
{ "11001100iiiiiiii", "tst.b #%i,@(R0,GBR)" },
{ "0010nnnnmmmm1010", "xor R%m,R%n" },
{ "11001010iiiiiiii", "xor #%i,R0" },
{ "11001110iiiiiiii", "xor.b #%i,@(R0,GBR)" },
{ "0100nnnn00000100", "rotl R%n" },
{ "0100nnnn00000101", "rotr R%n" },
{ "0100nnnn00100100", "rotcl R%n" },
{ "0100nnnn00100101", "rotcr R%n" },
{ "0100nnnnmmmm1100", "shad R%m,R%n" },
{ "0100nnnn00100000", "shal R%n" },
{ "0100nnnn00100001", "shar R%n" },
{ "0100nnnnmmmm1101", "shld R%m,R%n" },
{ "0100nnnn00000000", "shll R%n" },
{ "0100nnnn00000001", "shlr R%n" },
{ "0100nnnn00001000", "shll2 R%n" },
{ "0100nnnn00001001", "shlr2 R%n" },
{ "0100nnnn00011000", "shll8 R%n" },
{ "0100nnnn00011001", "shlr8 R%n" },
{ "0100nnnn00101000", "shll16 R%n" },
{ "0100nnnn00101001", "shlr16 R%n" },
{ "10001011dddddddd", "bf %d" },
{ "10001111dddddddd", "bf/s %d" },
{ "10001001dddddddd", "bt %d" },
{ "10001101dddddddd", "bt/s %d" },
{ "1010dddddddddddd", "bra %d" },
{ "0000nnnn00100011", "braf R%n" },
{ "1011dddddddddddd", "bsr %d" },
{ "0000nnnn00000011", "bsrf R%n" },
{ "0100nnnn00101011", "jmp @R%n" },
{ "0100nnnn00001011", "jsr @R%n" },
{ "0000000000001011", "rts" },
{ "0000000000101000", "clrmac" },
{ "0000000001001000", "clrs" },
{ "0000000000001000", "clrt" },
{ "0100mmmm00001110", "ldc R%m,SR" },
{ "0100mmmm00011110", "ldc R%m,GBR" },
{ "0100mmmm00101110", "ldc R%m,VBR" },
{ "0100mmmm00111110", "ldc R%m,SSR" },
{ "0100mmmm01001110", "ldc R%m,SPC" },
{ "0100mmmm11111010", "ldc R%m,DBR" },
{ "0100mmmm1nnn1110", "ldc R%m,R%n_BANK" },
{ "0100mmmm00000111", "ldc.l @R%m+,SR" },
{ "0100mmmm00010111", "ldc.l @R%m+,GBR" },
{ "0100mmmm00100111", "ldc.l @R%m+,VBR" },
{ "0100mmmm00110111", "ldc.l @R%m+,SSR" },
{ "0100mmmm01000111", "ldc.l @R%m+,SPC" },
{ "0100mmmm11110110", "ldc.l @R%m+,DBR" },
{ "0100mmmm1nnn0111", "ldc.l @R%m+,R%n_BANK" },
{ "0100mmmm00001010", "lds R%m,MACH" },
{ "0100mmmm00011010", "lds R%m,MACL" },
{ "0100mmmm00101010", "lds R%m,PR" },
{ "0100mmmm00000110", "lds.l @R%m+,MACH" },
{ "0100mmmm00010110", "lds.l @R%m+,MACL" },
{ "0100mmmm00100110", "lds.l @R%m+,PR" },
{ "0000000000111000", "ldtlb" },
{ "0000nnnn11000011", "movca.l R0,@R%n" },
{ "0000000000001001", "nop" },
{ "0000nnnn10010011", "ocbi @R%n" },
{ "0000nnnn10100011", "ocbp @R%n" },
{ "0000nnnn10110011", "ocbwb @R%n" },
{ "0000nnnn10000011", "pref @R%n" },
{ "0000000000101011", "rte" },
{ "0000000001011000", "sets" },
{ "0000000000011000", "sett" },
{ "0000000000011011", "sleep" },
{ "0000nnnn00000010", "stc SR,R%n" },
{ "0000nnnn00010010", "stc GBR,R%n" },
{ "0000nnnn00100010", "stc VBR,R%n" },
{ "0000nnnn00110010", "stc SSR,R%n" },
{ "0000nnnn01000010", "stc SPC,R%n" },
{ "0000nnnn00111010", "stc SGR,R%n" },
{ "0000nnnn11111010", "stc DBR,R%n" },
{ "0000nnnn1mmm0010", "stc R%m_BANK,R%n" },
{ "0100nnnn00000011", "stc.l SR,@-R%n" },
{ "0100nnnn00010011", "stc.l GBR,@-R%n" },
{ "0100nnnn00100011", "stc.l VBR,@-R%n" },
{ "0100nnnn00110011", "stc.l SSR,@-R%n" },
{ "0100nnnn01000011", "stc.l SPC,@-R%n" },
{ "0100nnnn00110010", "stc.l SGR,@-R%n" },
{ "0100nnnn11110010", "stc.l DBR,@-R%n" },
{ "0100nnnn1mmm0011", "stc.l R%m_BANK,@-R%n" },
{ "0000nnnn00001010", "sts MACH,R%n" },
{ "0000nnnn00011010", "sts MACL,R%n" },
{ "0000nnnn00101010", "sts PR,R%n" },
{ "0100nnnn00000010", "sts.l MACH,@-R%n" },
{ "0100nnnn00010010", "sts.l MACL,@-R%n" },
{ "0100nnnn00100010", "sts.l PR,@-R%n" },
{ "11000011iiiiiiii", "trapa #%i" },
{ "1111nnnn10001101", "fldi0 FR%n" },
{ "1111nnnn10011101", "fldi1 FR%n" },
{ "1111nnnnmmmm1100", "fmov FR%m,FR%n" },
{ "1111nnnnmmmm1000", "fmov.s @R%m,FR%n" },
{ "1111nnnnmmmm0110", "fmov.s @(R0,R%m),FR%n" },
{ "1111nnnnmmmm1001", "fmov.s @R%m+,FR%n" },
{ "1111nnnnmmmm1010", "fmov.s FR%m,@R%n" },
{ "1111nnnnmmmm1011", "fmov.s FR%m,@-R%n" },
{ "1111nnnnmmmm0111", "fmov.s FR%m,@(R0,R%n)" },
{ "1111nnn0mmm01100", "fmov DR%m,DR%n" },
{ "1111nnn0mmmm1000", "fmov @R%m,DR%n" },
{ "1111nnn0mmmm0110", "fmov @(R0,R%m),DR%n" },
{ "1111nnn0mmmm1001", "fmov @R%m+,DR%n" },
{ "1111nnnnmmm01010", "fmov DR%m,@R%n" },
{ "1111nnnnmmm01011", "fmov DR%m,@-R%n" },
{ "1111nnnnmmm00111", "fmov DR%m,@(R0,R%n)" },
{ "1111mmmm00011101", "flds FR%m,FPUL" },
{ "1111nnnn00001101", "fsts FPUL,FR%n" },
{ "1111nnnn01011101", "fabs FR%n" },
{ "1111nnnnmmmm0000", "fadd FR%m,FR%n" },
{ "1111nnnnmmmm0100", "fcmp/eq FR%m,FR%n" },
{ "1111nnnnmmmm0101", "fcmp/gt FR%m,FR%n" },
{ "1111nnnnmmmm0011", "fdiv FR%m,FR%n" },
{ "1111nnnn00101101", "float FPUL,FR%n" },
{ "1111nnnnmmmm1110", "fmac FR0,FR%m,FR%n" },
{ "1111nnnnmmmm0010", "fmul FR%m,FR%n" },
{ "1111nnnn01001101", "fneg FR%n" },
{ "1111nnnn01101101", "fsqrt FR%n" },
{ "1111nnnnmmmm0001", "fsub FR%m,FR%n" },
{ "1111mmmm00111101", "ftrc FR%m,FPUL" },
{ "1111nnn001011101", "fabs DR%n" },
{ "1111nnn0mmm00000", "fadd DR%m,DR%n" },
{ "1111nnn0mmm00100", "fcmp/eq DR%m,DR%n" },
{ "1111nnn0mmm00101", "fcmp/gt DR%m,DR%n" },
{ "1111nnn0mmm00011", "fdiv DR%m,DR%n" },
{ "1111mmm010111101", "fcnvds DR%m,FPUL" },
{ "1111nnn010101101", "fcnvsd FPUL,DR%n" },
{ "1111nnn000101101", "float FPUL,DR%n" },
{ "1111nnn0mmm00010", "fmul DR%m,DR%n" },
{ "1111nnn001001101", "fneg DR%n" },
{ "1111nnn001101101", "fsqrt DR%n" },
{ "1111nnn0mmm00001", "fsub DR%m,DR%n" },
{ "1111mmm000111101", "ftrc DR%m,FPUL" },
{ "0100mmmm01101010", "lds R%m,FPSCR" },
{ "0100mmmm01011010", "lds R%m,FPUL" },
{ "0100mmmm01100110", "lds.l @R%m+,FPSCR" },
{ "0100mmmm01010110", "lds.l @R%m+,FPUL" },
{ "0000nnnn01101010", "sts FPSCR,R%n" },
{ "0000nnnn01011010", "sts FPUL,R%n" },
{ "0100nnnn01100010", "sts.l FPSCR,@-R%n" },
{ "0100nnnn01010010", "sts.l FPUL,@-R%n" },
{ "1111nnn1mmm01100", "fmov DR%m,XD%n" },
{ "1111nnn0mmm11100", "fmov XD%m,DR%n" },
{ "1111nnn1mmm11100", "fmov XD%m,XD%n" },
{ "1111nnn1mmmm1000", "fmov @R%m,XD%n" },
{ "1111nnn1mmmm1001", "fmov @R%m+,XD%n" },
{ "1111nnn1mmmm0110", "fmov @(R0,R%m),DR%n" },
{ "1111nnnnmmm11010", "fmov XD%m,@R%n" },
{ "1111nnnnmmm11011", "fmov XD%m,@-R%n" },
{ "1111nnnnmmm10111", "fmov XD%m,@(R0,R%n)" },
{ "1111nnmm11101101", "fipr FV%m,FV%n" },
{ "1111nn0111111101", "ftrv XMTRX,FV%n" },
{ "1111101111111101", "frchg" },
{ "1111001111111101", "fschg" },
